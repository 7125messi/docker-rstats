#!/bin/bash
set -e

# Default behavior is to do everything from scratch.
# The --use-cache option is useful if you're iterating on a broken build.
if [[ "$1" ==  "--use-cache" ]]; then
    docker build --rm --cpu-period=100000 --cpu-quota=200000 -t kaggle/rstats-build .
else
    docker pull kaggle/rcran:latest
    docker build --rm --no-cache --cpu-period=100000 --cpu-quota=200000 -t kaggle/rstats-build .
fi


docker rm jupyter_test_r || true
rm -rf /tmp/rstats-build
mkdir -p /tmp/rstats-build/tmp
mkdir -p /tmp/rstats-build/devshm
mkdir -p /tmp/rstats-build/working

# Check that Jupyter server can run; if it dies on startup, the `docker kill` command will throw an error
docker run -d --name=jupyter_test_r --read-only --net=none -e HOME=/tmp -v $PWD:/input:ro -v /tmp/rstats-build/working:/working -w=/working -v /tmp/rstats-build/tmp:/tmp -v /tmp/rstats-build/devshm:/dev/shm kaggle/rstats-build jupyter notebook --allow-root --ip="*"
sleep 3
docker kill jupyter_test_r && docker rm jupyter_test_r

docker run --rm -t --read-only --net=none -e HOME=/tmp -v $PWD:/input:ro -v /tmp/rstats-build/working:/working -w=/working -v /tmp/rstats-build/tmp:/tmp -v /tmp/rstats-build/devshm:/dev/shm kaggle/rstats-build /bin/bash -c 'Rscript /input/test_build.R'

# Verify expected test_build.R output is present.
[ -s /tmp/rstats-build/working/plot1.png ] || exit 1
[ -s /tmp/rstats-build/working/Rplot001.png ] || exit 1
[ -s /tmp/rstats-build/working/plot2.gif ] || exit 1

docker tag kaggle/rstats-build:latest kaggle/rstats:latest
docker push kaggle/rstats:latest
